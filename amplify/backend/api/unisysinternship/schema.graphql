type User @model (
    mutations: {create: null, delete: null, update: "updateUser"}
    timestamps: null
    subscriptions: null
  )
  @auth(rules: [
    { allow: owner, ownerField: "id", provider: userPools, operations:[read, update] },
    { allow: private, provider: userPools, operations:[read] }
  ])
{
  id: ID!
  firstname: String!
  lastname: String!
  type: UserType!
}

type Attendance @model (
    queries: {list: "listAttendaces", get: "getAttendance"}
    mutations: {create: "createAttendance", delete: null, update: "updateAttendance"}
    timestamps: null
    subscriptions: null
  )
  @auth(rules: [
    { allow: private, provider: userPools, operations:[create, update, read] }
  ])
  @key(fields: ["id"])
{
  schoolId: ID!
  id: ID!
  userId: ID!
  date: String!
  attendance: AttendanceType!
  timestamp: Int!
  threads: [Thread] @connection(keyName: "attendance-index", fields: ["id"])
}

type Thread @model (
    queries: {list: "listThreads", get: null}
    mutations: {create: "createThread", delete: null, update: null}
    timestamps: null
    subscriptions: null
  )
  @auth(rules: [
    { allow: private, provider: userPools, operations:[create, read] }
  ])
  @key(name: "attendance-index", fields: ["attendanceId", "id"], queryField: "ThreadByAttendance")
{
  id: ID
  attendanceId: ID!
  userId: ID!
  user: User @connection(fields: ["userId"])
  contents: String!
}

enum UserType { TEACHER PARENT }
enum AttendanceType { ATTEND ABSENT }
